#lang racket
(require "suffix-tree.rkt")
(require "etapa1.rkt")
(require "etapa2.rkt")

(provide (all-defined-out))

;; Această etapă este dedicată aplicațiilor
;; arborelui de sufixe:
;; - găsirea unui șablon într-un text
;; - cel mai lung subșir comun a două texte
;; - găsirea unui subșir de lungime dată care se
;;   repetă în text
;; Conform convenției din etapele anterioare, un text
;; este întotdeauna reprezentat ca listă de caractere.
;; Rezultatele funcțiilor de mai jos sunt de asemenea
;; reprezentate ca liste de caractere.

; TODO 1
; Implementați funcția substring? care primește un text și
; un șablon nevid și întoarce true dacă șablonul apare în
; text, respectiv false în caz contrar.
; Observație: ați implementat deja logica principală a
; acestei căutări în etapa 1, în funcția st-has-pattern?,
; care este un operator al tipului ST. Acum aveți toate
; uneltele necesare implementării operatorului corespunzător
; pentru tipul text (pentru că în etapa 2 ați implementat
; construcția arborelui de sufixe asociat unui text).
(define (substring? text pattern)
  (let* ([result (text->cst text)]) (st-has-pattern? result pattern)))

; TODO 2
; Implementați funcția longest-common-substring care primește
; două texte și determină cel mai lung subșir comun al
; acestora, folosind algoritmul următor:
; 1. Construiește arborele de sufixe ST1 pentru primul text.
; 2. Pentru fiecare sufix din al doilea text (de la cel mai
;    lung la cel mai scurt), găsește cea mai lungă potrivire
;    cu sufixele din primul text, urmând căile relevante în ST1.
; 3. Rezultatul final este cel mai lung rezultat identificat
;    la pasul 2 (în caz de egalitate a lungimii, păstrăm
;    primul șir găsit).
; Folosiți named let pentru a parcurge sufixele.
; Observație: pentru sufixele din al doilea text nu dorim
; marcajul de final $ pentru a nu crește artificial lungimea
; șirului comun cu acest caracter.
; Hint: Revizitați funcția match-pattern-with-label (etapa 1).

;match-pattern-with-label returneaza asta:
;; - true, dacă șablonul este conținut integral în etichetă
; - lista (etichetă, nou pattern, subarbore), dacă șablonul se
;   potrivește cu eticheta dar nu este conținut în ea
;   (ex: ("na", "na$", subarborele de sub eticheta "na")
;   pentru șablonul inițial "nana$" și eticheta "na")
; - lista (false, cel mai lung prefix comun între etichetă și
;   șablon), dacă șablonul nu s-a potrivit cu eticheta sau nu
;   s-a găsit din start o etichetă care începe cu litera dorită
;   (ex1: (false, "n") pentru șablonul "numai" și eticheta "na")
;   (ex2: (false, "") pentru etichetă negăsită)

; TODO 2
; Implementați funcția longest-common-substring care primește
; două texte și determină cel mai lung subșir comun al
; acestora, folosind algoritmul următor:
; 1. Construiește arborele de sufixe ST1 pentru primul text.
; 2. Pentru fiecare sufix din al doilea text (de la cel mai
;    lung la cel mai scurt), găsește cea mai lungă potrivire
;    cu sufixele din primul text, urmând căile relevante în ST1.
; 3. Rezultatul final este cel mai lung rezultat identificat
;    la pasul 2 (în caz de egalitate a lungimii, păstrăm
;    primul șir găsit).
; Folosiți named let pentru a parcurge sufixele.
; Observație: pentru sufixele din al doilea text nu dorim
; marcajul de final $ pentru a nu crește artificial lungimea
; șirului comun cu acest caracter.
; Hint: Revizitați funcția match-pattern-with-label (etapa 1).

;match-pattern-with-label returneaza asta:
;; - true, dacă șablonul este conținut integral în etichetă
; - lista (etichetă, nou pattern, subarbore), dacă șablonul se
;   potrivește cu eticheta dar nu este conținut în ea
;   (ex: ("na", "na$", subarborele de sub eticheta "na")
;   pentru șablonul inițial "nana$" și eticheta "na")
; - lista (false, cel mai lung prefix comun între etichetă și
;   șablon), dacă șablonul nu s-a potrivit cu eticheta sau nu
;   s-a găsit din start o etichetă care începe cu litera dorită
;   (ex1: (false, "n") pentru șablonul "numai" și eticheta "na")
;   (ex2: (false, "") pentru etichetă negăsită)

; (define (match-pattern-with-label st pattern)
;   (let* ((branch (get-ch-branch st (car pattern))))
;   (cond
;     ((equal? branch #f) (list #f '()))
;     (else
;      (let* ((label (get-branch-label branch))
;          (subtree (get-branch-subtree branch))
;          (lcp (longest-common-prefix label pattern)))
;      (cond
;        ((equal? (car lcp) pattern) #t) ;caz 1
;        ((null? (second lcp)) (list label (third lcp) subtree)) ;caz 2
;        (else (list #f (first lcp))) ;caz 3
;        ))
;      )
;    ))
; )

(define (longest-common-substring text1 text2)
    (let* ((st1 (text->cst text1))
            (suff2 (reverse (get-suffixes text2))))
        (let funct((st st1) (suff2 suff2) (result '()))
            (cond
                ((null? suff2) result)
                (else
                    (let* ((suffix (car suff2))
                            (match (match-pattern-with-label st suffix)))
                        (cond
                            ; suffixul e continut integral
                            ((equal? match #t) 
                                (funct st1 (cdr suff2) (if (> (length suffix) (length result)) suffix result)))

                            ; s-a potrivit pana intr-un punct ex1: (false, "n") pentru șablonul "numai" și eticheta "na"
                            ((and (list? match) (equal? (first match) #f))
                                (funct st1 (cdr suff2) (if (> (length (second match)) (length result)) (second match) result)))

                            ; dacă șablonul se potrivește cu eticheta dar nu este conținut în ea (ex: ("na", "na$", subarborele de sub eticheta "na") pentru șablonul inițial "nana$" și eticheta "na")
                            ; trebuie cautat mai departe in subarbore
                            ; si trebuie salvat in rezultat partea partiala gasita pana acum
                            (else (let* ((label (car match))
                                        (new-pattern (cdr match))
                                        (subtree (cadr match))
                                        (helper (longest-common-substring-helper subtree new-pattern))
                                        )
                                        (display "haha")
                                ;     (cond
                                ;         ((equal? helper #t) (if (> (length label) (length result))
                                ;                                 (funct st (cdr suff2) label)
                                ;                                 (funct st (cdr suff2) result)))
                                ;         ; verificam daca second helper + ce am gasit deja > result
                                ;         ((and (list? helper) (equal? (first helper) #f)) (if (> (+ (length label) (length (second helper))) (length result))
                                ;                                                             (funct st (cdr suff2) (append label (second helper)))
                                ;                                                             (funct st (cdr suff2) result)))
                                ;     )
                                ;     (if (> (length label) (length result))
                                ;         (funct st (cdr suff2) label)
                                ;         (funct st (cdr suff2) result))
                                )
                            )
                        )
                    )
                )
            )
        )
    )
)

(define (longest-common-substring-helper st pattern)
    (display pattern)
    ; (let* ((match-result (match-pattern-with-label st pattern)))
        ; (cond
        ; ((equal? match-result #t) #t)
        ; ((and (list? match-result) (equal? (first match-result) #f)) (list #f (second match-result)))
        ; (else (longest-common-substring-helper (third match-result) (second match-result)))
        ; )
    ; )
)

; TODO 3
; Implementați funcția repeated-substring-of-given-length
; care primește un text și un număr natural len și
; parcurge arborele de sufixe al textului până găsește un
; subșir de lungime len care se repetă în text.
; Dacă acest subșir nu există, funcția întoarce false.
; Obs: din felul în care este construit arborele de sufixe
; (pe baza alfabetului sortat), rezultatul va fi primul
; asemenea subșir din punct de vedere alfabetic.
; Ideea este următoarea: orice cale în arborele de sufixe
; compact care se termină cu un nod intern (un nod care
; are copii, nu este o frunză) reprezintă un subșir care
; se repetă, pentru că orice asemenea cale reprezintă un
; prefix comun pentru două sau mai multe sufixe ale textului.
; Folosiți interfața definită în fișierul suffix-tree
; atunci când manipulați arborele.
(define (repeated-substring-of-given-length text len)
  'your-code-here)
